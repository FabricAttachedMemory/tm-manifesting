#!/bin/bash

###########################################################################
# Wait for ping and ssh responses, no extra tools required.  Well, ping :-).
# Command line processing; usually called from startnodes.

NODES="$@"
N_WANTED=$#

[ -z "$NETNAME" ] && echo "export NETNAME=something" >&1 && exit 1

set -u

LOG=/tmp/waitnodes.$NETNAME.log
echo -e "\n-----------------------\nSTARTING NEW RUN AT `date`" >> $LOG

###########################################################################

function log() {
	echo -e "$@"
	echo -e "$@" >> $LOG
}

###########################################################################

function all_running() {	# Optional $1 means wait, else die
    while true; do
	N_RUNNING=`pgrep -a qemu-system-aar | grep $NETNAME | wc -l`
	let DEAD=$N_WANTED-$N_RUNNING
	[ $DEAD -eq 0 ] && return
	[ $# -eq 0 ] && log "$DEAD qemu(s) are not running" >&2 && exit 1
	log "Waiting for $DEAD qemu(s) to start..."
	sleep 1
    done
}

###########################################################################
# Pretty-print the time elapsed.  Reset ELAPSED_START as needed.

ELAPSED_START=`date +%s`

function elapsed() {
    END=`date +%s`
    let E=$END-$ELAPSED_START
    let H=$E/3600
    let M=$E/60
    let S=$E%60
    printf "%2d:%02d:%02d" $H $M $S
}

###########################################################################
# Main

all_running wait	# settling time if called from startnodes

HOSTNAMES=`for N in $NODES; do printf "node%02d " $N; done`

WAITING=$HOSTNAMES
START=`date +%s`
while [ "$WAITING" ]; do
    all_running
    WAITING=
    echo -en "\nPing"
    for H in $HOSTNAMES; do	# yeah do them all each time
	echo -n " $H"
	ping -c1 $H >/dev/null 2>&1
	[ $? -ne 0 ] && WAITING="$WAITING $H" && echo -n " (no ping)"
	echo -n ";"
    done
    echo 
    [ "$WAITING" ] && log "Ping failed on $WAITING" && sleep 3
done

WAITING=$HOSTNAMES
LAST_WAITING=
LAST_COUNT=0
while [ "$WAITING" ]; do
    log "\n`elapsed` elapsed, count = $LAST_COUNT"

    all_running
    WAITING=
    echo -en "\nRe-ping and test sshd for"
    for H in $HOSTNAMES; do	# yeah do them all each time
	# Either kernel panic (maybe a dropped TFTP packet?) or systemd
	# hang at "bring up network interface"
	echo -n " $H"
	ping -c1 $H >/dev/null 2>&1
	if [ $? -ne 0 ]; then
	    echo -n " (no ping)"
	    WAITING="$WAITING $H"
	else
	    # From the Google.  First time, the timeout is about 20 seconds.
	    # Second time is about 3.
	    (echo > /dev/tcp/$H/22) >/dev/null 2>&1
	    if [ $? -ne 0 ]; then
		echo -n " (no ssh)"
		WAITING="$WAITING $H"
	    fi
	fi
	echo -n ";"
    done
    if [ "$WAITING" ]; then
	log "\nSSH failed on $WAITING"
	sleep 10	# Combine with count to give it a minute
	if [ "$WAITING" != "$LAST_WAITING" ]; then
	    LAST_WAITING="$WAITING"
	    LAST_COUNT=0
	else
	    let LAST_COUNT=$LAST_COUNT+1
	    if [ $LAST_COUNT -gt 5 ]; then
	    	log "\nSTUCK ON $WAITING"
		WAITING=	# exit the loop
		break		# really really
	    fi
	fi
    fi
done
log "\n`elapsed` total (ping + ssh)"

exit 0
