#!/bin/bash

# Start multiple FAME nodes.
# Args are "all" or a list of nodenumbers range 1-40.

if [ $# -eq 0 -o "$1" = "-?" ]; then
	echo "usage: $0 all | nodenum [nodenum...]"
	exit 0
fi

[ -z "$NETNAME" ] && echo "export NETNAME=something" >&1 && exit 1
[ -z "$FAM" ] && echo "export FAM=something" >&1 && exit 1

if [ $1 = all ]; then
    # Use manifesting service to walk through all forty nodes.  Slight cheat:
    # range 1-40.  FIXME: add node coordinate and node_id to status json,
    # then I could do listnodes and enumerate.
    jq --version >/dev/null 2>&1
    [ $? -ne 0 ] && echo "You need to apt-get install jq" >&2 && exit 1

    NODES=
    for N in `seq 1 40`; do
        STATUS=`tm-manifest getnode $N | jq -r '."200".status'`
	[ "$STATUS" = ready ] && NODES="$NODES $N"
    done
else
    NODES="$@"	# These aren't qualified in any way
fi

set -u

STARTNODE=startnode.arm		# Hardcoded now; in the future, who knows?

###########################################################################
# What's already running?

N=`pgrep -a qemu-system-aar | grep $NETNAME | wc -l` 
[ $N -ne 0 ] && echo "$N node(s) already running on $NETNAME" >&2 && exit 1

SCREEN=`screen -list | grep $NETNAME`
[ "$SCREEN" ] && echo "screen is already running $SCREEN" >&2 && exit 1

###########################################################################
# Go.  

screen -S $NETNAME -dm		# Session name, detached
echo -n Starting
for N in $NODES; do
	echo -n " $N"
	TITLE=node`printf "%02d" $N`
	screen -S $NETNAME -X screen -t $TITLE $STARTNODE $N
	# Staggering the start helps.  0, 1, or 2 seconds, it doesn't matter:
	# starting 40 nodes takes 4 minutes total.  All that changes is 
	# waitnodes elapsed time.  1 second made 200 perfect runs, so...
	sleep 2		# ...to allow for multiple containers on the SD.
done
echo
echo "Attach nodeXX from shell:    attachnode XX"
echo "Prompt for window name:      ctl-a then '"
echo "Navigate list of windows:    ctl-a then \""
echo "Quit (detach):               ctl-a then d"
sleep 3

exec waitnodes $NODES
