#!/bin/bash

# Run through LSGi steps at
# https://hpel-wiki.ftc.rdlabs.hpecorp.net/doku.php/l4tm:lsgi_setup_and_execution

# Run this script after a successful boot of all nodes with LSGiURL_sshkeys
# manifest.  The ToRMS user (you!) needs the private key to hit all nodes'
# nophrase pubkey.  In other words, first
# 1. Setup up your .ssh/config file to use the phraseless private key to nodes.
# 2. tm-manifest put lsgiurl_nophrase.json
# 3. tm-manifest unsetnode all
# 4. tm-manifest setnode all LSGiURL_nophrase
# 5. tm-manifest waitnode all
# 6. export PATH=$PATH:/path/to/manifesting/unittests/QAscripts
# 7. export FAM=/path/to/FAMfile	made with fallocate -l 256G
# 8. export NETNAME=YOURNET		the FAME virtual bridge
# 9. startnodes all
# and finally run this script.

PSSHOSTS=/tmp/hosts.pssh	# Here on ToRMS
LSGIDIR=/usr/local/LSGi		# Where the code is found on each node
MASTER=node01			# The only one that works with remote make -C

# Global scope needed
shopt -s expand_aliases
alias pssh="parallel-ssh -h $PSSHOSTS -l l4tm"
alias pscp="parallel-scp -h $PSSHOSTS -l l4tm"

# Done as variable not alias for use in chained ssh across nodes
SSH="/usr/bin/ssh -oBatchMode=yes"

set -u

###########################################################################
# Set up pssh "parallel-ssh" and pscp.

function setup_pssh() {
	echo "Set up pssh, pscp, and ssh"

	dpkg -l pssh >/dev/null 2>&1
	[ $? -ne 0 ] && echo '"apt-get install pssh", try again' >&2 && exit 1

	rm -f $PSSHOSTS
	for I in {01..40}; do echo node$I >> $PSSHOSTS; done
}

###########################################################################
# All nodes are able to ssh freely to any other node courtesy of the
# LSGiURL_nophrase manifest.  This removes the need for the "make configureSSH"
# part of the instructions.  But test it...

function verify_phraseless_ssh() {
	echo "Test phraseless ssh between all nodes..."
	waitnodes all	# Sanity check that all nodes are up and running

	# Is my .ssh/config correct?
	$SSH node01 echo >/dev/null 2>&1
	[ $? -ne 0 ] && echo "ToRMS .ssh/config needs some work" >&2 && exit 1

	# Suppress superfluous ssh messages from first-time access after boot.

	TMP=`$SSH node06 $SSH node11 $SSH node16 hostname 2>/dev/null`
	[ "$TMP" != node16 ] && echo "Chained ssh is broken" >&2 && exit 1

	# Check aliases
	pssh ls
	[ $? -ne 0 ] && echo "pssh alias is broken" >&2 && exit 1
}

###########################################################################
# Librarian here, LFS on nodes.  First start of lfs_fuse should create
# /lfs by default.

function verify_LFS() {
	echo "Verify Librarian is running..."

	pgrep librarian.py >/dev/null
	[ $? -ne 0 ] && echo Start the Librarian on this system >&2 && exit 1

	# lfs_fuse.py currently has a bug where it will start multiple copies.

	echo "Start LFS daemon on all nodes..."
	pssh 'pgrep lfs_fuse.py || sudo lfs_fuse.py --daemon'
	sleep 10
}

###########################################################################
# NOW do Greg's instructions, minus "make configureSSH" (cuz I did that above)
# and "make configure" (cuz I'm running from Debian package, not git repo).
# Also, this script supersedes "make configureHosts" cuz that was dog slow
# (8 seconds per node, it's just copying files to two places).  It now takes
# ten seconds total, and I probably don't even need the LSGIHOST push now.
# What they should REALLY do is put their "hosts" file in /lfs.   Whatever.

function setup_LSGi_hosts() {
	echo "Distribute the LSGi hosts file to all nodes..."

	pssh sudo chown -R l4tm $LSGIDIR
	LSGIHOSTS=$LSGIDIR/hosts
	LSGINFERENCE=$LSGIDIR/demo/inference/hosts

	# The pssh hosts format matches LSGi.  What a coinkydink.  
	# Copy it one other place to obviate make configureHosts.
	pscp $PSSHOSTS $LSGIHOSTS
	pscp $PSSHOSTS $LSGINFERENCE
}

###########################################################################
# FINALLY. Regardless of $MASTER, node01 seems to pick up the test supervisor
# duties; probably something with make -C.  Hence the pssh pkill.

function test_LSGi() {
	$SSH $MASTER sudo pkill QueryService >/dev/null 2>&1
	$SSH $MASTER 'make -C /usr/local/LSGi testMultiNode'
}

###########################################################################
# MAIN

setup_pssh
verify_phraseless_ssh
verify_LFS

# WORKAROUND: /dev/zbcommit is referenced by libpmem but is created by
# the zbridge driver, although it claims "zbcommit".  Default perms are 
# root:600 which breaks the actual demo gibbsDNSapp running as l4tm.
# Wait until LFS is running as zbridge is loaded on-demand.

echo "Workaround for /dev/zbcommit permissions"
pssh sudo chmod 444 /dev/zbcommit	# Betty is fixing this

# Back to regularly-scheduled program
setup_LSGi_hosts
test_LSGi

exit 0
