#!/bin/bash

# Start a ARM64 "node" that will PXE boot against the given interface.
# It's a RAM-based rootfs whose (initrd) image was built by the
# Manifesting suite for The Machine.  Get that running first, then this
# script can fire off the nodes.

TMMS_FAM=${TMMS_FAM:-}			# If empty, FAM stanzas not used
TMMS_FAMEZ=${TMMS_FAMEZ:-}		# Socket from the server (or empty)
TMMS_NETNAME=${TMMS_NETNAME:-brtmms}	# Libvirt bridge from manifesting

###########################################################################
# Since I'm using function output redirection in the stanza functions,
# this could get called from a subshell.

MYPID=$$

function die() {
        echo -e "\n$*\n" >&2
	kill $MYPID
	exit 1
}

###########################################################################
# Some setup, mostly idiot checks.

function verify_environment() {
	[ `whoami` != root ] && SUDO='sudo -E'
	$SUDO echo	# establish hysteresis

	[ $NODE -lt 1 -o $NODE -gt 40 ] && die "nodenum must be 1-40"

	[ "$TMMS_NETNAME" ] || die "TMMS_NETNAME is required"
	ip link show $TMMS_NETNAME >/dev/null 2>&1
	[ $? -ne 0 ] && die "$TMMS_NETNAME does not exist" >&2

	# The qemu maintainers dropped a space in the version string.
	set -- `$QEMU --version | tr '(' ' '`
	THISVER=${4:0:5}	# Three significant digits
	echo "QEMU version '$THISVER' available"
	# Use regex to check current version against VERIFIED_QEMU_VERSIONS.
	# See man page for bash, 3.2.4.2 Conditional Constructs.  No quotes.    
	[[ $VERIFIED_QEMU_VERSIONS =~ $THISVER ]] || \
    		die "qemu is not version" ${VERIFIED_QEMU_VERSIONS[*]}
	return 0
}

###########################################################################
# Assist creation of IVSHMEM files for MFT FAME and the Zbridge driver.

function memparms2stanza() {
	MEMPATH=$1
	MEMSIZE=$2
	SHARE=$3
	MEMID=`basename $MEMPATH`
	echo "-object memory-backend-file,mem-path=$MEMPATH,size=$MEMSIZE,id=$MEMID,share=$SHARE \
	      -device ivshmem-plain,memdev=$MEMID"
	return 0
}

###########################################################################
# The librarian/zbridge driver count on this order when enumerating
# IVSHMEM devices.

function ZBRIDGE_stanza() {
	STANZA=
	if [ "$TMMS_FAM" ]; then
		ZREGS=(
			"z${D2}csr	1M"
			"z${D2}desbk	1M"
			"z${D2}desbl	1M"
			"z${D2}frwl	32M"
			"z${D2}inlv	1M"
			"z${D2}commit	8M"
		)
		for Z in "${ZREGS[@]}"; do
			set -- $Z
    			SUBSTANZA=`memparms2stanza /dev/shm/$1 $2 off`
			STANZA="$STANZA $SUBSTANZA"
		done
	fi
	echo $STANZA
	return 0
}

###########################################################################

function FAME_stanza() {
	STANZA=
	if [ "$TMMS_FAM" ]; then
		[ ! -f "$TMMS_FAM" ] && die "$TMMS_FAM not found"
		T=`stat -c %s "$TMMS_FAM"`
		let TMP=$T/1024/1024/1024
		FAMSIZE=${TMP}G
		[ $TMP -lt 1 ] && die "$TMMS_FAM is less than 1G"
		[ $TMP -gt 256 ] && die "$TMMS_FAM is greater than 256G"
    		STANZA=`memparms2stanza $TMMS_FAM $FAMSIZE on`
	fi
	echo $STANZA
	return 0
}

###########################################################################

function FAMEZ_stanza() {
	STANZA=
	if [ "$TMMS_FAMEZ" ]; then
		[ -S $TMMS_FAMEZ ] || die "$TMMS_FAMEZ is not a socket"
		STANZA="-chardev socket,id=FAMEZ,path=$TMMS_FAMEZ \
			-device ivshmem-doorbell,chardev=FAMEZ,vectors=64"
	fi
	echo $STANZA
	return 0
}

############################################################################
# ARM64 needs two ROM images to boot from.  One is the EFI bootloader and
# the other is EFI variables.  Store them in one place by node number.

function PFLASH_stanza() {
	local BOOTROM=/usr/share/qemu-efi/QEMU_EFI.fd	# Package qemu-efi
	local EFIROM=$ROMDIR/pflash.$D2.efirom
	local EFIVARS=$ROMDIR/pflash.$D2.efivars

	mkdir -p $ROMDIR || die "Cannot create $ROMDIR"
	echo "`date`: support files for $0" > $ROMDIR/1stREADME

	# Always make a new read-only boot ROM.
	rm -f $EFIROM
	cat $BOOTROM /dev/zero | \
		dd iflag=fullblock bs=1M count=64 of=$EFIROM 2>&-
	chmod 444 $EFIROM

	# Don't overwrite an existing data ROM (provide reboot persistence).
	[ ! -f $EFIVARS ] && \
		dd iflag=fullblock if=/dev/zero bs=1M count=64 of=$EFIVARS 2>&-

	echo "-drive if=pflash,format=raw,file=$EFIROM,readonly \
	      -drive if=pflash,format=raw,file=$EFIVARS"
	return 0
}

###########################################################################
# Network prep.  The netdev helper defaults to /usr/lib/qemu/qemu-bridge-helper
# which needs /etc/qemu/bridge.conf, root:root, mode 640, with the line
# allow <TMMS_NETNAME>

function NETDEVNIC_stanza() {
	ip link show $TMMS_NETNAME >/dev/null || \
		die "No such interface $TMMS_NETNAME"

	local NETACCESS=/etc/qemu/bridge.conf                                                 
	grep -Eq "^allow\s+$TMMS_NETNAME" $NETACCESS
	[ $? -ne 0 ] && die "Please add 'allow $TMMS_NETNAME' to $NETACCESS"

	# When using FAME, this pattern triggers lfs_fuse to pick up its
	# node ID from the MAC address.
	local MAC="52:54:42:$D2:$D2:$D2"
	ps -ef | grep $QEMU | grep -q $MAC | grep -q $TMMS_NETNAME
	[ $? -eq 0 ] && die "Node $NODE MAC $MAC already running"

	NETDEV="-netdev bridge,br=$TMMS_NETNAME,id=thisbridge"
	NIC="-device virtio-net-device,mac=$MAC,netdev=thisbridge"                      
	echo "$NETDEV $NIC"
}

###########################################################################
# MAIN - do a few things before set -u

if [ $# -ne 1 -o "$1" = "-h" -o "$1" = "-?" ]; then
	echo "TMMS_FAM=$TMMS_FAM"
	echo "TMMS_FAMEZ=$TMMS_FAMEZ"
	echo "TMMS_NETNAME=$TMMS_NETNAME"
	echo "usage: `basename $0` nodenum"
	exit 0
fi
[ $1 -lt 1 -o $1 -gt 40 ] && die "Node number must be 1-40"

# A few globals
typeset -r NODE=$1
typeset -r D2=`printf "%02d" $NODE`
typeset -r QEMU=qemu-system-aarch64
typeset -r VERIFIED_QEMU_VERSIONS="2.6.0 2.8.0 2.8.1"
typeset -r ROMDIR="$HOME/.romdir"		# Per-node boot ROM images...
typeset -r STDERR=$ROMDIR/qemu.$D2.stderr	# ...also used for this
SUDO=

set -u

verify_environment

# Construct stanzas for the QEMU invocation.  Order probably matters
# so understand the dependencies.  This PXE boot results in a RAM-based 
# permanent initrd that goes into the RAM of the VM.  The file system will
# take up to half of that RAM by default.  Once booted and logged inside,
# "mount -oremount,size=6000M rootfs /" would bump it to 3/4 use
# (if you start with 8G VRAM).

VRAM="-m 8192"				# for RAM + FS, FS default max is 1/2
CPU="-cpu cortex-a57 -smp 4"		# Don't get carried away, cowboy
MACHTYPE="-M virt"			# Chosen because it works on MFT
QEMUBASE="$QEMU $VRAM $MACHTYPE $CPU"	# And we're off

CONSOLE="-nographic"			# Takes over termulator session

PFLASH=`PFLASH_stanza`			# Boot ROMs
NETDEVNIC=`NETDEVNIC_stanza`		# eth0 in the VM

FAME=`FAME_stanza`			# Can be used independently...
ZBRIDGE=`ZBRIDGE_stanza`

FAMEZ=`FAMEZ_stanza`			# ...from this.

###########################################################################
# FINALLY.  Clear "intr" in THIS shell so ctrl-C is ignored and passed to
# qemu (ie, the actual VM).  Hang on QEMU, so this is best run inside a
# "screen -S nodeXX", then <ctrl-A><d> to detach, "screen -r nodeXX" to
# re-attach later.

CMD="$QEMUBASE $PFLASH $NETDEVNIC $CONSOLE $FAME $ZBRIDGE $FAMEZ"
echo $CMD

sleep 5				# Some messages to grok before...
stty intr ''
$SUDO $CMD 2>$STDERR		# That's QEMU stderr, not the VM
RET=$?

# First restore intr, then kick the termulator harder.
stty sane && stty intr 
[ $RET -eq 0 ] && reset		# Solved some problem which I can't remember
echo qemu exited $RET
[ $RET -ne 0 ] && cat $STDERR
exit 0
