#!/bin/bash

# Start a FAME ARM64 "node" that will PXE boot against the given interface.
# Reduced from manifesting/PoC/diskless.sh

###########################################################################

function die() {
        echo -e "\n$*\n" >&2
	exit 1
}

###########################################################################
# Command line and environment processing

[ $# -ne 1 -o "$1" = "-h" -o "$1" = "-?" ] && die "usage: $0 nodenum"
NODE=$1
set -u

[ -z "$NETNAME" ] && die "export NETNAME=something"
[ -z "$FAM" ] && die "export FAM=/some/where or NONE"

[ `whoami` != root ] && SUDO=sudo || SUDO=
$SUDO echo	# establish hysteresis

# Idiot checks.  The qemu maintainers dropped a space in the version string.

QEMU=qemu-system-aarch64
set -- `$QEMU --version | tr '(' ' '`
THISVER=${4:0:5}	# Three significant digits
echo "QEMU version '$THISVER' available"
VERIFIED_QEMU_VERSIONS="2.6.0 2.8.0 2.8.1"                              
# Use regex to check the current version against VERIFIED_QEMU_VERSIONS.
# See man page for bash, 3.2.4.2 Conditional Constructs.  No quotes.    
[[ $VERIFIED_QEMU_VERSIONS =~ $THISVER ]] || \
    die "qemu is not version" ${VERIFIED_QEMU_VERSIONS[*]}

[ $NODE -lt 1 -o $NODE -gt 40 ] && die "nodenum must be 1-40"

ip link show $NETNAME >/dev/null 2>&1
[ $? -ne 0 ] && die "$NETNAME does not exist" >&2

if [ "$FAM" = NONE ]; then
    FAM=
    FAMSIZE=
else
    [ ! -f "$FAM" ] && die "$FAM not found"
    T=`stat -c %s "$FAM"`
    let TMP=$T/1024/1024/1024
    FAMSIZE=${TMP}G
    echo "$FAM = $FAMSIZE"
    [ $TMP -lt 1 ] && die "$FAM is less than 1G"
    [ $TMP -gt 256 ] && die "$FAM is greater than 256G"
fi

###########################################################################
# Network prep

ip link show $NETNAME >/dev/null || die "No such interface $NETNAME"
DECIMAL=`printf "%02d" $NODE`

# netdev helper defaults to /usr/lib/qemu/qemu-bridge-helper.                   
# It needs file /etc/qemu/bridge.conf, root:root, mode 640, with the line       
# allow <NETNAME>                                                               
NETACCESS=/etc/qemu/bridge.conf                                                 
grep -Eq "^allow\s+$NETNAME" $NETACCESS                                         
[ $? -ne 0 ] && die "Missing 'allow' in $NETACCESS"

# This pattern triggers lfs_fuse to pick up its node ID from the MAC address.
MAC="52:54:42:$DECIMAL:$DECIMAL:$DECIMAL"
ps -ef | grep $QEMU | grep -q $MAC | grep -q $NETNAME
[ $? -eq 0 ] && die "Node $NODE MAC $MAC already running"

NETDEV="-netdev bridge,br=$NETNAME,id=thisbridge"
NIC="-device virtio-net-device,mac=$MAC,netdev=thisbridge"                      

###########################################################################
# EFI ROM/NV prep
# BOOTROM=/usr/share/qemu/OVMF.fd	# Don't know what's up with this

BOOTTYPE='QEMU_EFI'	# maybe a cmdline arg some day

MACHTYPE="-M virt"
CPU="-cpu cortex-a57 -smp 4"
case "$BOOTTYPE" in
    SFW)
    	BOOTROM=$HOME/rom.bin.1.13		# Needs Vulcan model for reset
	# MACHTYPE="-M virt,gic_version=3"	# Only native with kvm not tcg
	;;

    QEMU_EFI)
	BOOTROM=/usr/share/qemu-efi/QEMU_EFI.fd	# Package qemu-efi, PoC too old
	;;

    *)
	echo 'Bad bootrom' >&2 && exit 1
	;;
esac

# echo "$BOOTTYPE: Boot ROM is $BOOTROM"

# Always make a boot ROM, don't overwrite an existing data ROM
ROMDIR="$HOME/.romdir"
mkdir -p $ROMDIR
echo "Support files for $0" > $ROMDIR/1stREADME
EFIROM=$ROMDIR/pflash.$DECIMAL.efirom
EFIVARS=$ROMDIR/pflash.$DECIMAL.efivars
rm -f $EFIROM
cat $BOOTROM /dev/zero | dd iflag=fullblock bs=1M count=64 of=$EFIROM 2>/dev/null
chmod -w $EFIROM
[ ! -f $EFIVARS ] && dd iflag=fullblock if=/dev/zero bs=1M count=64 of=$EFIVARS 2>/dev/null

PFLASH="-drive if=pflash,format=raw,file=$EFIROM,readonly \
	-drive if=pflash,format=raw,file=$EFIVARS"

###########################################################################
# Construct remaining arguments.  File system will take up to half of RAM
# by default.  Once inside, "mount -oremount,size=10000M rootfs /" would
# bump it.  If I want to reach 40 nodes I should keep this sane.

CONSOLE="-serial stdio -nographic"
CONSOLE="-serial stdio"
CONSOLE="-nographic"

QEMU="$QEMU -m 16384 $MACHTYPE $CPU"

# -d in_asm

function memparms2stanza() {
    MEMPATH=$1
    MEMSIZE=$2
    SHARE=$3
    MEMID=`basename $MEMPATH`
    echo "-object memory-backend-file,mem-path=$MEMPATH,size=$MEMSIZE,id=$MEMID,share=$SHARE -device ivshmem-plain,memdev=$MEMID"
}

FAME=
ZBRIDGE=
if [ "$FAM" ]; then

    FAME="-object \
          memory-backend-file,size=$FAMSIZE,mem-path=$FAM,id=FAM,share=on \
          -device ivshmem-plain,memdev=FAM"

    FAME=`memparms2stanza $FAM $FAMSIZE on`

    # Preserve this order as librarian/zbridge driver count on it when
    # enumerating IVSHMEM devices.
    ZREGS=("z${DECIMAL}csr 1M"
	   "z${DECIMAL}desbk 1M"
	   "z${DECIMAL}desbl 1M"
	   "z${DECIMAL}frwl 32M"
	   "z${DECIMAL}inlv 1M"
	   "z${DECIMAL}commit 8M")
    ZBRIDGE=
    for Z in "${ZREGS[@]}"; do
	set -- $Z
    	STANZA=`memparms2stanza /dev/shm/$1 $2 on`
	ZBRIDGE="$ZBRIDGE $STANZA"	# Order matters!
    done
fi

STDERR=$ROMDIR/qemu.$DECIMAL.stderr
stty intr ''	# So this running shell will ingore ctrl-C, passing it to qemu
$SUDO $QEMU $PFLASH $NETDEV $NIC $CONSOLE $FAME $ZBRIDGE 2>$STDERR
RET=$?
stty sane && stty intr 
[ $RET -eq 0 ] && reset
echo qemu exited $RET
exit 0
