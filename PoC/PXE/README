Note this repo is expected to be at /opt/torms/manifesting on the VM host.
You should be reading this as /opt/torms/manifesting/PXE/README.

===========================================================================
Set up the libvirt/QEMU intranet

"Install" the pxe_XXX.xml network definition (XXX = amd or arm):

$ sudo mkdir -m 777 /opt/torms/tftp
$ sudo virsh net-define pxe_XXX.xml
$ sudo virsh net-autostart pxe_XXX
$ sudo virsh net-start pxe_XXX

If net-start fails it's usually due to an unexpected directory structure.

netdev helper defaults to /usr/lib/qemu/qemu-bridge-helper; it needs to
have this line in /etc/qemu/bridge.conf, mode 640 owned by root:

allow pxe_amd
allow pxe_arm

===========================================================================
Set up the PXE environment

# apt-get install pxelinux syslinux syslinux-common syslinux-efi syslinux-utils

$ ln -s /usr/share/doc/pxelinux/README.txt.gz	 README.txt.gz

$ cd /opt/torms/tftp

("$" prompt is omitted in this next block for ease of copy/paste)

ln -s /usr/lib/PXELINUX/pxelinux.0		  pxelinux.0
ln -s /usr/lib/syslinux/modules/bios/ldlinux.c32  ldlinux.c32
ln -s /usr/lib/syslinux/modules/bios/libcom32.c32 libcom32.c32
ln -s /usr/lib/syslinux/modules/bios/libutil.c32  libutil.c32
ln -s /usr/lib/syslinux/modules/bios/menu.c32     menu.c32
ln -s /usr/lib/syslinux/modules/bios/vesamenu.c32 vesamenu.c32
ln -s /usr/lib/syslinux/memdisk		          memdisk

$ mkdir amd64 arm64 pxelinux.cfg

$ cp ../manifesting/PXE/default.menu pxelinux.cfg/default
$ cp ../manifesting/PXE/background.png pxelinux.cfg

There's a "toram" append that seems like it might be useful but I haven't
figured out where.

===========================================================================
Set up the PXE environment (UEFI Arm64)

$ cd /opt/torms/tftp

$ mkdir -p boot/grub/

$ cd boot/grub/

This is where UEFI will look for a grub.cfg file.

$ vim grub.cfg

Paste the following into grub.cfg
""""

set gfxmode=auto
insmod efi_gop
insmod efi_uga
insmod gfxterm
terminal_output gfxterm

configfile (tftp)/boot/grub/efidefault

"""

 Notice "configfile (tftp)/boot/grub/efidefault" line which tells PXE which
boot menu configuration to look at.

$ vim efidefault

"""

set default=0
set menu_color_highlight=white/brown

menuentry 'L4TM Catapult ARM64(Custom)' {
    echo "Loading l4tm.vmlinuz and l4tm.cpio..."
    linux    (tftp)/arm64/l4tm.vmlinuz --append root=/dev/ram0 console=ttyAMA0 earlycon=pl011,0x9000000 rw
    initrd   (tftp)/arm64/l4tm.cpio
    }
fi


"""

This config file is similar to pxelinux.cfg/default. Define a menu entry that will
point to the right .vmlinuz and .cpio files to start booting the system.

Next step is to get .efi boot files into /opt/torms/tftp/ folder. Here is couple
links where you can get it:

Arm64: http://hlinux-deejay.us.rdlabs.hpecorp.net/~volchak/bootaa64.efi
Arm64:  http://hlinux-deejay.us.rdlabs.hpecorp.net/l4tm-iso/latest/grubaa64-20151102.efi
x86_64: http://hlinux-deejay.us.rdlabs.hpecorp.net/l4tm-iso/latest/grubx64-20151102.efi
Linaro: https://wiki.linaro.org/Boards/D01/PXE?action=AttachFile&do=view&target=grub2.efi

Now it is up to efi firmware to pick up grub.cfg file and get the game rolling.

Note: it is important to use the correct dnsmasq configuration to point to .efi
file in /opt/torms/tftp folder. Thus, if you were not using "nodenet.amd64-uefi.xml"
configuration, then you need to switch to it:

$ sudo virsh net-define /opt/torms/PXE/nodenet.amd64-uefi.xml
$ sudo virsh net-start pxe_amd-uefi

If errors out, then you need to shut down virsh domain that is using "default"
bridge.

The main and essential difference in this domain configuration is this:

      <bootp file='bootx86.efi'/>

that points to the correct .efi file on tftp server (/opt/torms/tftp/).
